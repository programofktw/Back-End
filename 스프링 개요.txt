스피링 빈에는

빈 이름과 빈 객체를 갖는데

빈 객체에는 참조값이 들어감.

빈 조회
	부모 타입을 조회하면 자식까지 다 나옴

수동 빈조회는 getBean()으로 조회
	- 동일한 타입이 2개 이상 있는 경우 이름을 지정해야함

getBeansOfType()
	- 참조 타입이 맵으로 나오고


ApplicationContext ac = new AnnotationConfigApplicationContext(TestConfig.class);
	- 스프링 컨테이너의 최상위는 빈 팩토리
	- 빈 팩토리를 상속 받은것이 AC임
	- 어플리키이션 콘텍스트를 스프링 컨테이너로 생각할것
	- 어노테이션콘피그어플리케이션콘텍스트는 빈의 소멸까지(자바 코드 해석가능)
	- 설정 정보를 읽고 빈 디피니션을 생성
	- XML로도 가능하고 빈 디피니션 컨테이너를 직접 만들 수 도 있음.
	- = 자바로도 XML로도 가능하고
	-

@Bean만으로는 싱글톤이 되지 않음


콘피그레이션에노테이션
	- 싱글톤을 유지시켜줌
	- 싱글톤은 동일한 객체를 계속 만들어주는 것.
	- 하나의 객체는 하나로만 존재.
	- 싱글톤 패턴이 존재하지만 직접 지정해주지 않음.
	- 싱글톤 컨테이너 = 콘피그레이션으로 가능.
	- 씨지리브으로 화이트 코드를 조작

싱글톤 방식의 주의점
	- stateless로 무상태로 존재
	- 클라이언트가 필요한 것을 원하는 것.
	- 클라이언트의 요청을 보관하지는 않음.
	- 특정 클라이언트에 의존해선 안됨.
	- 


컴포넌트 스캔
	- 컴포넌트가 붙은 것을 다 Bean에 등록
	- 컴포넌트 애노테이션을 포함하는 것을 찾음
	- 컴포넌트라고 붙은 클래스의 첫글자를 소문자로 바꾸고 이를 빈 이름
	- 참조객체로 @하여 등록
	- 베이스 패키지를 통해 
	- Autowired하면서 자동 빈 등록함
	- includeFilters 컴포넌트 스캔 대상으로 추가
	- excludeFilters 컴포넌트 스캔 대상에서 제외(잘 안씀)


빈 등록 -> 의존 주입
(생성자 주입은 스프링 빈에 등록하자마

자동 빈 등록과 자동 빈등록이 충돌나면 오류

자동 빈 등록과 수동 빈 등록이 충돌나면 수동 빈이 우선

JSR 프로바이더
	- 생성을 지연시킬때
	- 프롭시