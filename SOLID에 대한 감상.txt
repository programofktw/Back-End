DI에 관하여

DI에 대해 공부를 하기에 앞서 
형이 말한대로 SOLID 개발 기법에 대해서 공부를 하였습니다.

우선 각각의
S : 단일 책임 원칙
O : 개방 폐쇄 원칙
L : 리코시브 치환의 원칙
I : 인터페이스 분리의 원칙
D : 의존성역전의 원칙을 알아보았었고


이 중에서도 D에 해당하는 의존성 역전의 원칙이 DI와도 실질적인 연관이 있다고 생각해서
더 봐보았습니다.

우선 객체 지향 자체에대해서 생각한 점은

일단 내가 객체지향이라는 것을 분명하게 알고 있는 것은 아니지만
기본적으로 
과거의 C언어와 같은 절차지향 언어의 문제점이
각 코드 별 의존성이 너무 높다는 것이고
그것을 해결하기 위해서 나온 다음세대의 프로그래밍 언어가 자바와 같은 객체지향 언어라는 것은 알았는데

그냥 개념적으로만 알고 있는 수준이었지만
이번에 공부를 하면서 그 차이에 대해서 좀 더 인식하고
여태까지 자바를 구현하면서 내가 짠 코드를 반성하게 되었었습니다.

실제 수업에서도 이런 SOLID 개발 기법을 배우지도 않았어서 코드를 짤때 
그냥 메인 메소드에 다 집어 넣은 것이었는데 
각 기능을 분명하게 구분하여 구현해야겠다고 생각했고

다음으로 의존 관계 주입(DI)에 대해서는 
정확하게 작동 방식을 확인한 것은 아닌데
스프링에는 DI 컨테이너가 존재해서 클래스간의 의존관계를
당사자 클래스들 끼리가 아닌 외부로부터(DI 컨테이너) 주입된다는 것을 알 수 있었습니다.

여기에 해당하는 것이 우리의 예제 코드의 경우에는
MemberRepository 인터페이스 부분이라구 생각하구

이렇게 구현하게되면 우리가 실제 구현 내용의 요구사항이 변경되더라도 
의존관계에 따라 요구사항에 맞게 구현한 클래스를 넣어주게 되면 
됨으로써 개발 뿐만이 아닌 유지보수적 측면에서도 도움이 될 것이라고 생각이 들었어.