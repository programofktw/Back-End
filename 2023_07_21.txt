d@scope의 기본 값은 싱글톤이다.
	싱글톤은 스프링의 시작부터 종료까지 유지되는 생명주기를 가짐

초기화 콜백은 초기화 하는 시점을 알려주는 것

초기화 블럭
	@postConstruct : 초기화할 것이다 
	@PreDestroy : 빈을 없앨 것이다.

	@Bean()
	
	스프링에서밖에 못씀.

getBean을 사용하는 2가지 방법
	1. 이름, 타입을 집어넣는 방법

	2. 타입만 집어넣는 방법

getBeansofType는 하위 모든 빈을 가져오는 것

getBean디피니션맵


primary
	의존 관계를 주입하려고 할때
	구현체가 여러개 다 등록되어 있다면

	@primary 기본 구현체 등록

	@퀄리파이어 직접 매핑
		-컴파일 단계에서 

http 네트워크
	7계층
	
	소켓ㅂ 라이브러리(우리가 만든 메세지를 운영체제에 보내는 것)

	IP protocal의 문제점
		- TCP처럼 연결을 확인하지 않음
		- 데이터 손실을 고려하지 않음
		- 순서를 고려하지 않음.
		- port도 고려하지 않음.
	
	TCP VS UDP	
	
	http 3.0에서 UDP의 문제를 해결해줘서 UDP가 각광을 받음
	(아직은 잘 안쓰임)

	http requestMessage/ responsMessage

	Method
		1. GET : url에 정보를 담음.
		2. Post : message-body에 담김.
		3. PUT : 생성 혹은 대체(store)
		4. PATCH : 수정
		5. DELETE : 삭제
		6. HEAD : 

	http
		응답 요청 구조(클라이언트-서버 구조)
		비연결성(지속연결)

	요청메세지 : start-line / header / message-body
		start-line : method, path, parameter, http 버전 
 
	반응 메세지 : HTTP 버전 /상태코드/상태코드_자연어

 

	속성 : 안전, 멱등, 캐시가능

	html control URI
		- 리소스 단위로 URI를 만들고 도저히 안될떄만 html control을 씀.

	상태코드
		- 200번대 요청이 정상적 처리됨
			1. 200 OK
			2. 201 CREATE(새로운 리소스가 생성되었다.)
				-> 서버가 리소스를 생성하고 관리
			3. 202 Accpted(요청은 접수되었지만 오래걸린다.)
			4. 204 Not Content(리소스가 저장되었다는 사실만을 전달)
		- 300번대 요청이 만료하려면 추가적인 행동이 필요
			redirection : 
			1. 영구(301 308)
				-301 : 자동으로 요청을 GET으로 바꾸고 message 바디를 지움.
				-308 : 메소드와 메세지 바디를 바꾸지 않음.
			2. 일시(302 307 303)
				-302 : 일시적인 301
				-307 : 일시적인 308
				-303 : 무조건 GET으로 바꾼다는것
				-PRG : POST/REDIRECT/GET 
			3. 캐시(304)
				-304 :
				- 이태그(해쉬) : 캐시의 롤백을 반영함.
				
				- 라스트 모티파이(날짜) : 캐시의 LM과 비교해서 다를 경우
					롤백을 반영하지 않음

		- 400번대 클라이언트가 문제다
			1. 400 : 요청이 잘못됨
			2. 401 : 권한이 없음
			3. 403 : 권한이 잘못됨
			4. 404 : 요청한 파라미터가 없음 잘못됨
		- 500번대 서버가 문제가 있어
			1. 500 : 서버에 문제가 있을때
			2. 503 : 일시적인 서버 정지

	표현 협상
		협상 : 클라이언트가 형식을 지정하는 것


	Header필드에 HOST, REFerer User-Agent Server
		host : 도메인

	쿠키

	캐시

	


@리퀄드알규먼트콘스트럭트